// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MOD
}

enum PaymentStatus {
  succeeded
  pending
  failed
}

enum NivelIngles {
  inicial
  basico
  intermedio
  avanzado
}

enum Status {
  scheduled
  cancelled
  completed
}

enum ClassType {
  individual
  grupal
}

enum HostType {
  anfitrion
  invitado
}

enum ActivityStatus {
  uploaded
  pending
}

enum Level {
  easy
  medium
  hard
}

enum Type {
  exam
  audio
  video
  reading
}

enum classRole {
  anfitrion
  participante
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  name               String
  image              String?
  localidad          String?             @default("-")
  telefono           Int?                @default(0)
  nivel              NivelIngles         @default(inicial)
  status             Boolean             @default(false)
  newsletter         String              @default("no")
  billingMercadoPago billingMercadoPago?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  UserActivity       UserActivity[]
}

model VirtualClass {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId // classId
  googleEventId       String         @unique // allow me to modify this event
  bookedById          String         @db.ObjectId // same id than model User: id
  accessCode          String
  startTime           DateTime
  endTime             DateTime
  hostType            HostType       @default(anfitrion)
  currentParticipants Int            @default(1)
  maxParticipants     Int // studentsCount
  classType           ClassType
  classPrice          Int
  htmlLink            String
  status              Status         @default(scheduled) // scheduled, cancelled, completed
  summary             String
  description         String
  learningFocus       String
  participantsIds     String[]       @default([])
  activityStatus      ActivityStatus @default(pending)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  UserActivity        UserActivity[]
}

model Task {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String // Markdown AI
  solvedContent String // Markdown answer AI
  description   String // Short description about the task
  type          Type
  difficulty    Level          @default(medium)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  UserActivity  UserActivity[]
}

model UserActivity {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  taskId    String    @db.ObjectId
  classId   String    @db.ObjectId
  rol       classRole
  completed Boolean   @default(false)

  user      User?         @relation(fields: [userId], references: [id])
  task      Task?         @relation(fields: [taskId], references: [id])
  class     VirtualClass? @relation(fields: [classId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model billingMercadoPago {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
