// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MOD
}

enum PaymentStatus {
  succeeded
  pending
  failed
}

model User {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  email       String              @unique
  name        String
  image       String?
  role        Role                @default(USER)
  resume      Resume[]
  stripe      billingStripe?
  mercadoPago billingMercadoPago?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Resume {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.ObjectId
  title           String?
  description     String?
  photoUrl        String           @default("/avatar.png")
  colorHex        String           @default("#000000")
  borderStyle     String           @default("squircle")
  summary         String?
  firstName       String?
  lastName        String?
  email           String?
  jobTitle        String?
  city            String?
  country         String?
  phone           String?
  workExperiences WorkExperience[]
  educations      Education[]
  skills          String[]
  //languages       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model WorkExperience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  resumeId    String    @db.ObjectId
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String    @db.ObjectId
  resume    Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model billingStripe {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String         @unique @db.ObjectId
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId        String         @unique
  stripeSubscriptionId    String         @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean        @default(false)
  stripePaymentId         String?        @unique
  amount                  Float?
  currency                String?
  status                  PaymentStatus?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model billingMercadoPago {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
