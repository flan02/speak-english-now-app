// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MOD
}

enum PaymentStatus {
  succeeded
  pending
  failed
}

enum NivelIngles {
  inicial
  basico
  intermedio
  avanzado
}

enum Status {
  scheduled
  cancelled
  completed
}

enum ClassType {
  individual
  grupal
}

enum HostType {
  anfitrion
  invitado
}

enum Actividad {
  uploaded
  pending
}

enum Level {
  easy
  medium
  hard
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  name               String
  image              String?
  role               Role                @default(USER)
  localidad          String?             @default("-")
  telefono           Int?                @default(0)
  nivel              NivelIngles         @default(inicial)
  status             Boolean             @default(false)
  newsletter         String              @default("no")
  billingMercadoPago billingMercadoPago?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model VirtualClass {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId // classId
  googleEventId       String    @unique // allow me to modify this event
  bookedById          String    @db.ObjectId // same id than model User: id
  accessCode          String
  startTime           DateTime
  endTime             DateTime
  hostType            HostType  @default(anfitrion)
  currentParticipants Int       @default(1)
  maxParticipants     Int // studentsCount
  classType           ClassType
  classPrice          Int
  htmlLink            String
  status              Status    @default(scheduled) // scheduled, cancelled, completed
  summary             String
  description         String
  learningFocus       String
  participantsIds     String[]  @default([])
  actividad           Actividad @default(pending)
  actividadId         String?   @db.ObjectId // Task id
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Task {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  classIds      String[] // Every VirtualClass has access to this Task
  title         String
  content       String // Markdown AI
  solvedContent String // Markdown answer AI
  description   String // Short description about the task
  type          String // quiz, writing, speaking, listening, exam
  difficulty    Level    @default(medium)
  classId       String[] @default([]) // Classes that have received this task
  participants  Json? // [{ userId, status, score }]
  //metadata    Json? // Any extra info. OPCIONAL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model billingMercadoPago {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
